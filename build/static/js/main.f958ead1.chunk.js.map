{"version":3,"sources":["index.js"],"names":["AutoScalingText","state","scale","this","node","actualScale","parentNode","offsetWidth","setState","className","style","transform","ref","props","children","React","Component","CalculatorDisplay","value","language","navigator","formattedValue","parseFloat","toLocaleString","useGrouping","maximumFractionDigits","match","test","CalculatorKey","onPress","onPoint","CalculatorOperations","prevValue","nextValue","Calculator","displayValue","operator","waitingForOperand","handleKeyDown","event","key","preventDefault","inputDigit","parseInt","performOperation","inputDot","inputPercent","clearLastChar","clearDisplay","clearAll","substring","length","newValue","String","fixedDigits","replace","toFixed","digit","nextOperator","inputValue","currentValue","document","addEventListener","removeEventListener","clearText","toggleSign","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f958ead1.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PointTarget from 'react-point'\nimport './index.css';\n\nclass AutoScalingText extends React.Component {\n  state = {\n    scale: 1\n  };\n  \n  componentDidUpdate() {\n    const { scale } = this.state\n    \n    const node = this.node\n    const parentNode = node.parentNode\n    \n    const availableWidth = parentNode.offsetWidth\n    const actualWidth = node.offsetWidth\n    const actualScale = availableWidth / actualWidth\n    \n    if (scale === actualScale)\n      return\n    \n    if (actualScale < 1) {\n      this.setState({ scale: actualScale })\n    } else if (scale < 1) {\n      this.setState({ scale: 1 })\n    }\n  }\n  \n  render() {\n    const { scale } = this.state\n    \n    return (\n      <div\n        className=\"auto-scaling-text\"\n        style={{ transform: `scale(${scale},${scale})` }}\n        ref={node => this.node = node}\n      >{this.props.children}</div>\n    )\n  }\n}\n\nclass CalculatorDisplay extends React.Component {\n  render() {\n    const { value, ...props } = this.props\n    \n    const language = navigator.language || 'en-US'\n    let formattedValue = parseFloat(value).toLocaleString(language, {\n      useGrouping: true,\n      maximumFractionDigits: 6\n    })\n    \n    // Add back missing .0 in e.g. 12.0\n    const match = value.match(/\\.\\d*?(0*)$/)\n    \n    if (match)\n      formattedValue += (/[1-9]/).test(match[0]) ? match[1] : match[0]\n    \n    return (\n      <div {...props} className=\"calculator-display\">\n        <AutoScalingText>{formattedValue}</AutoScalingText>\n      </div>\n    )\n  }\n}\n\nclass CalculatorKey extends React.Component {\n  render() {\n    const { onPress, className, ...props } = this.props\n    \n    return (\n      <PointTarget onPoint={onPress}>\n        <button className={`calculator-key ${className}`} {...props}/>\n      </PointTarget>\n    )\n  }\n}\n\nconst CalculatorOperations = {\n  '/': (prevValue, nextValue) => prevValue / nextValue,\n  '*': (prevValue, nextValue) => prevValue * nextValue,\n  '+': (prevValue, nextValue) => prevValue + nextValue,\n  '-': (prevValue, nextValue) => prevValue - nextValue,\n  '=': (prevValue, nextValue) => nextValue\n}\n\nclass Calculator extends React.Component {\n  state = {\n    value: null,\n    displayValue: '0',\n    operator: null,\n    waitingForOperand: false\n  };\n  \n  clearAll() {\n    this.setState({\n      value: null,\n      displayValue: '0',\n      operator: null,\n      waitingForOperand: false\n    })\n  }\n\n  clearDisplay() {\n    this.setState({\n      displayValue: '0'\n    })\n  }\n  \n  clearLastChar() {\n    const { displayValue } = this.state\n    \n    this.setState({\n      displayValue: displayValue.substring(0, displayValue.length - 1) || '0'\n    })\n  }\n  \n  toggleSign() {\n    const { displayValue } = this.state\n    const newValue = parseFloat(displayValue) * -1\n    \n    this.setState({\n      displayValue: String(newValue)\n    })\n  }\n  \n  inputPercent() {\n    const { displayValue } = this.state\n    const currentValue = parseFloat(displayValue)\n    \n    if (currentValue === 0)\n      return\n    \n    const fixedDigits = displayValue.replace(/^-?\\d*\\.?/, '')\n    const newValue = parseFloat(displayValue) / 100\n    \n    this.setState({\n      displayValue: String(newValue.toFixed(fixedDigits.length + 2))\n    })\n  }\n  \n  inputDot() {\n    const { displayValue } = this.state\n    \n    if (!(/\\./).test(displayValue)) {\n      this.setState({\n        displayValue: displayValue + '.',\n        waitingForOperand: false\n      })\n    }\n  }\n  \n  inputDigit(digit) {\n    const { displayValue, waitingForOperand } = this.state\n    \n    if (waitingForOperand) {\n      this.setState({\n        displayValue: String(digit),\n        waitingForOperand: false\n      })\n    } else {\n      this.setState({\n        displayValue: displayValue === '0' ? String(digit) : displayValue + digit\n      })\n    }\n  }\n  \n  performOperation(nextOperator) {    \n    const { value, displayValue, operator } = this.state\n    const inputValue = parseFloat(displayValue)\n    \n    if (value == null) {\n      this.setState({\n        value: inputValue\n      })\n    } else if (operator) {\n      const currentValue = value || 0\n      const newValue = CalculatorOperations[operator](currentValue, inputValue)\n      \n      this.setState({\n        value: newValue,\n        displayValue: String(newValue)\n      })\n    }\n    \n    this.setState({\n      waitingForOperand: true,\n      operator: nextOperator\n    })\n  }\n  \n  handleKeyDown = (event) => {\n    let { key } = event\n    \n    if (key === 'Enter')\n      key = '='\n    \n    if ((/\\d/).test(key)) {\n      event.preventDefault()\n      this.inputDigit(parseInt(key, 10))\n    } else if (key in CalculatorOperations) {\n      event.preventDefault()\n      this.performOperation(key)\n    } else if (key === '.') {\n      event.preventDefault()\n      this.inputDot()\n    } else if (key === '%') {\n      event.preventDefault()\n      this.inputPercent()\n    } else if (key === 'Backspace') {\n      event.preventDefault()\n      this.clearLastChar()\n    } else if (key === 'Clear') {\n      event.preventDefault()\n      \n      if (this.state.displayValue !== '0') {\n        this.clearDisplay()\n      } else {\n        this.clearAll()\n      }\n    }\n  };\n  \n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown)\n  }\n  \n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown)\n  }\n  \n  render() {\n    const { displayValue } = this.state\n    \n    const clearDisplay = displayValue !== '0'\n    const clearText = clearDisplay ? 'C' : 'AC'\n    \n    return (\n      <div className=\"calculator\">\n        <CalculatorDisplay value={displayValue}/>\n        <div className=\"calculator-keypad\">\n          <div className=\"input-keys\">\n            <div className=\"function-keys\">\n              <CalculatorKey className=\"key-clear\" onPress={() => clearDisplay ? this.clearDisplay() : this.clearAll()}>{clearText}</CalculatorKey>\n              <CalculatorKey className=\"key-sign\" onPress={() => this.toggleSign()}>±</CalculatorKey>\n              <CalculatorKey className=\"key-percent\" onPress={() => this.inputPercent()}>%</CalculatorKey>\n            </div>\n            <div className=\"digit-keys\">\n              <CalculatorKey className=\"key-0\" onPress={() => this.inputDigit(0)}>0</CalculatorKey>\n              <CalculatorKey className=\"key-dot\" onPress={() => this.inputDot()}>●</CalculatorKey>\n              <CalculatorKey className=\"key-1\" onPress={() => this.inputDigit(1)}>1</CalculatorKey>\n              <CalculatorKey className=\"key-2\" onPress={() => this.inputDigit(2)}>2</CalculatorKey>\n              <CalculatorKey className=\"key-3\" onPress={() => this.inputDigit(3)}>3</CalculatorKey>\n              <CalculatorKey className=\"key-4\" onPress={() => this.inputDigit(4)}>4</CalculatorKey>\n              <CalculatorKey className=\"key-5\" onPress={() => this.inputDigit(5)}>5</CalculatorKey>\n              <CalculatorKey className=\"key-6\" onPress={() => this.inputDigit(6)}>6</CalculatorKey>\n              <CalculatorKey className=\"key-7\" onPress={() => this.inputDigit(7)}>7</CalculatorKey>\n              <CalculatorKey className=\"key-8\" onPress={() => this.inputDigit(8)}>8</CalculatorKey>\n              <CalculatorKey className=\"key-9\" onPress={() => this.inputDigit(9)}>9</CalculatorKey>\n            </div>\n          </div>\n          <div className=\"operator-keys\">\n            <CalculatorKey className=\"key-divide\" onPress={() => this.performOperation('/')}>÷</CalculatorKey>\n            <CalculatorKey className=\"key-multiply\" onPress={() => this.performOperation('*')}>×</CalculatorKey>\n            <CalculatorKey className=\"key-subtract\" onPress={() => this.performOperation('-')}>−</CalculatorKey>\n            <CalculatorKey className=\"key-add\" onPress={() => this.performOperation('+')}>+</CalculatorKey>\n            <CalculatorKey className=\"key-equals\" onPress={() => this.performOperation('=')}>=</CalculatorKey>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Calculator/>, document.getElementById('root'));\n"],"sourceRoot":""}